// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicAppAPI.Data;

#nullable disable

namespace MusicAppAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MusicAppAPI.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SongEdited")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SongEntered")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SongRating")
                        .HasColumnType("int");

                    b.Property<string>("SongUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistName = "TestArtist",
                            IsFavorite = true,
                            SongEdited = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1372),
                            SongEntered = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1370),
                            SongName = "TestSong",
                            SongRating = 4,
                            SongUrl = "testURL",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArtistName = "TestArtist2",
                            IsFavorite = false,
                            SongEdited = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1379),
                            SongEntered = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1377),
                            SongName = "TestSong2",
                            SongRating = 2,
                            SongUrl = "testURL2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            ArtistName = "TestArtist3",
                            IsFavorite = true,
                            SongEdited = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1385),
                            SongEntered = new DateTime(2022, 6, 28, 22, 13, 41, 510, DateTimeKind.Local).AddTicks(1384),
                            SongName = "TestSong3",
                            SongRating = 5,
                            SongUrl = "testURL3",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("MusicAppAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 68, 108, 90, 77, 84, 86, 49, 105, 56, 84, 72, 89, 99, 47, 56, 84, 119, 87, 99, 55, 89, 108, 76, 76, 56, 100, 48, 88, 67, 109, 76, 80, 48, 82, 121, 88, 74, 66, 120, 109, 43, 69, 85, 102, 111, 71, 100, 73, 99, 117, 70, 51, 57, 56, 65, 120, 48, 112, 88, 76, 104, 56, 90, 85, 115, 65, 67, 101, 84, 98, 90, 107, 52, 43, 85, 68, 80, 71, 116, 117, 90, 69, 86, 97, 107, 103, 61, 61 },
                            PasswordSalt = new byte[] { 47, 122, 66, 114, 117, 101, 101, 88, 100, 109, 67, 77, 50, 78, 86, 66, 97, 98, 112, 71, 113, 113, 120, 120, 47, 88, 69, 48, 56, 114, 107, 116, 52, 43, 106, 80, 84, 49, 77, 107, 52, 79, 110, 43, 74, 122, 83, 51, 43, 76, 71, 111, 78, 77, 83, 99, 49, 106, 103, 97, 66, 52, 99, 87, 83, 100, 109, 120, 101, 71, 57, 98, 100, 67, 118, 75, 119, 104, 74, 98, 97, 117, 114, 101, 85, 43, 120, 66, 80, 120, 75, 104, 90, 98, 67, 57, 49, 121, 107, 69, 55, 115, 80, 112, 72, 85, 109, 119, 102, 70, 78, 47, 88, 84, 68, 83, 70, 48, 82, 66, 108, 121, 48, 119, 100, 50, 116, 77, 66, 111, 67, 56, 105, 54, 85, 111, 90, 76, 101, 110, 57, 77, 65, 98, 111, 115, 76, 70, 49, 85, 72, 77, 73, 97, 49, 112, 80, 69, 122, 112, 89, 111, 105, 102, 115, 85, 57, 77, 79, 84, 115, 61 },
                            Username = "TestUser"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 68, 108, 90, 77, 84, 86, 49, 105, 56, 84, 72, 89, 99, 47, 56, 84, 119, 87, 99, 55, 89, 108, 76, 76, 56, 100, 48, 88, 67, 109, 76, 80, 48, 82, 121, 88, 74, 66, 120, 109, 43, 69, 85, 102, 111, 71, 100, 73, 99, 117, 70, 51, 57, 56, 65, 120, 48, 112, 88, 76, 104, 56, 90, 85, 115, 65, 67, 101, 84, 98, 90, 107, 52, 43, 85, 68, 80, 71, 116, 117, 90, 69, 86, 97, 107, 103, 61, 61 },
                            PasswordSalt = new byte[] { 47, 122, 66, 114, 117, 101, 101, 88, 100, 109, 67, 77, 50, 78, 86, 66, 97, 98, 112, 71, 113, 113, 120, 120, 47, 88, 69, 48, 56, 114, 107, 116, 52, 43, 106, 80, 84, 49, 77, 107, 52, 79, 110, 43, 74, 122, 83, 51, 43, 76, 71, 111, 78, 77, 83, 99, 49, 106, 103, 97, 66, 52, 99, 87, 83, 100, 109, 120, 101, 71, 57, 98, 100, 67, 118, 75, 119, 104, 74, 98, 97, 117, 114, 101, 85, 43, 120, 66, 80, 120, 75, 104, 90, 98, 67, 57, 49, 121, 107, 69, 55, 115, 80, 112, 72, 85, 109, 119, 102, 70, 78, 47, 88, 84, 68, 83, 70, 48, 82, 66, 108, 121, 48, 119, 100, 50, 116, 77, 66, 111, 67, 56, 105, 54, 85, 111, 90, 76, 101, 110, 57, 77, 65, 98, 111, 115, 76, 70, 49, 85, 72, 77, 73, 97, 49, 112, 80, 69, 122, 112, 89, 111, 105, 102, 115, 85, 57, 77, 79, 84, 115, 61 },
                            Username = "Ajdin"
                        });
                });

            modelBuilder.Entity("MusicAppAPI.Models.Song", b =>
                {
                    b.HasOne("MusicAppAPI.Models.User", "User")
                        .WithMany("Songs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicAppAPI.Models.User", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
